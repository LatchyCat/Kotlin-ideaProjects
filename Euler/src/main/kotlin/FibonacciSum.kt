import kotlin.math.IEEErem

fun main() {
    // sequence is generated by adding the previous two terms
    val threshold = 4000000
    var sum = 0.0
    var current = 1
    var previous = -1

    // 1, 2,
    println(current)
    while(sum <= threshold) {
        println(sum)
        if (current == 1) {
            sum = checkDivisible(current, current, sum)
            previous = current
            current++
        } else {
            sum = checkDivisible(current, previous, sum)
            previous = current
            current = sum.toInt()
        }
    }
    println(sum)
}

private fun checkDivisible(current: Int, previous: Int, sum: Double): Double {
    var sum1 = sum
    val sumOfPrevCurr = (current + previous).toDouble()
    if (sumOfPrevCurr.IEEErem(2.0) == 0.0) {
        sum1 = sumOfPrevCurr
    }
    return sum1
}